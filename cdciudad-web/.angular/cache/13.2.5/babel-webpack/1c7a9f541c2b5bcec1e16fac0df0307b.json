{"ast":null,"code":"import _asyncToGenerator from \"/home/oldboy379/cdciudad-web/cdciudad-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.5.2 | MIT Licensed | https://stenciljs.com\n */\n\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || {\n  head: {}\n};\nconst H = win.HTMLElement || class {};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/(() => (doc.head.attachShadow + '').indexOf('[native') > -1)() : true;\n\nconst supportsListenerOptions = /*@__PURE__*/(() => {\n  let supportsListenerOptions = false;\n\n  try {\n    doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n      get() {\n        supportsListenerOptions = true;\n      }\n\n    }));\n  } catch (e) {}\n\n  return supportsListenerOptions;\n})();\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = BUILD.constructableCSS ? /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})() : false;\nconst Context = {};\n\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (BUILD.hostListener && listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    if (BUILD.hostListenerTargetParent) {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(([flags]) => flags & 32\n        /* TargetParent */\n        );\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(([flags]) => !(flags & 32\n        /* TargetParent */\n        ));\n      }\n    }\n\n    listeners.map(([flags, name, method]) => {\n      const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\n\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    if (BUILD.lazyLoad) {\n      if (hostRef.$flags$ & 256\n      /* isListenReady */\n      ) {\n        // instance is ready, let's call it's member method for this event\n        hostRef.$lazyInstance$[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    } else {\n      hostRef.$hostElement$[methodName](ev);\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\n\nconst getHostListenerTarget = (elm, flags) => {\n  if (BUILD.hostListenerTargetDocument && flags & 4\n  /* TargetDocument */\n  ) return doc;\n  if (BUILD.hostListenerTargetWindow && flags & 8\n  /* TargetWindow */\n  ) return win;\n  if (BUILD.hostListenerTargetBody && flags & 16\n  /* TargetBody */\n  ) return doc.body;\n  if (BUILD.hostListenerTargetParent && flags & 32\n  /* TargetParent */\n  ) return elm.parentElement;\n  return elm;\n}; // prettier-ignore\n\n\nconst hostListenerOpts = flags => supportsListenerOptions ? {\n  passive: (flags & 1\n  /* Passive */\n  ) !== 0,\n  capture: (flags & 2\n  /* Capture */\n  ) !== 0\n} : (flags & 2\n/* Capture */\n) !== 0;\n\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n\nconst createTime = (fnName, tagName = '') => {\n  if (BUILD.profile && performance.mark) {\n    const key = `st:${fnName}:${tagName}:${i++}`; // Start\n\n    performance.mark(key); // End\n\n    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  if (BUILD.profile && performance.mark) {\n    if (performance.getEntriesByName(key).length === 0) {\n      performance.mark(key);\n    }\n\n    return () => {\n      if (performance.getEntriesByName(measureText).length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst inspect = ref => {\n  const hostRef = getHostRef(ref);\n\n  if (!hostRef) {\n    return undefined;\n  }\n\n  const flags = hostRef.$flags$;\n  const hostElement = hostRef.$hostElement$;\n  return {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2\n      /* hasRendered */\n      ),\n      hasConnected: !!(flags & 1\n      /* hasConnected */\n      ),\n      isWaitingForChildren: !!(flags & 4\n      /* isWaitingForChildren */\n      ),\n      isConstructingInstance: !!(flags & 8\n      /* isConstructingInstance */\n      ),\n      isQueuedForUpdate: !!(flags & 16\n      /* isQueuedForUpdate */\n      ),\n      hasInitializedComponent: !!(flags & 32\n      /* hasInitializedComponent */\n      ),\n      hasLoadedComponent: !!(flags & 64\n      /* hasLoadedComponent */\n      ),\n      isWatchReady: !!(flags & 128\n      /* isWatchReady */\n      ),\n      isListenReady: !!(flags & 256\n      /* isListenReady */\n      ),\n      needsRerender: !!(flags & 512\n      /* needsRerender */\n      )\n    },\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$,\n    ['s-id']: hostElement['s-id'],\n    ['s-cr']: hostElement['s-cr'],\n    ['s-lr']: hostElement['s-lr'],\n    ['s-p']: hostElement['s-p'],\n    ['s-rc']: hostElement['s-rc'],\n    ['s-sc']: hostElement['s-sc']\n  };\n};\n\nconst installDevTools = () => {\n  if (BUILD.devTools) {\n    const stencil = win.stencil = win.stencil || {};\n    const originalInspect = stencil.inspect;\n\n    stencil.inspect = ref => {\n      let result = inspect(ref);\n\n      if (!result && typeof originalInspect === 'function') {\n        result = originalInspect(ref);\n      }\n\n      return result;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta, mode);\n  let style = styles.get(scopeId);\n\n  if (!BUILD.attachStyles) {\n    return scopeId;\n  } // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          if (BUILD.cssVarShim && plt.$cssShim$) {\n            styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10\n            /* needsScopedEncapsulation */\n            ));\n            const newScopeId = styleElm['s-sc'];\n\n            if (newScopeId) {\n              scopeId = newScopeId; // we don't want to add this styleID to the appliedStyles Set\n              // since the cssVarShim might need to apply several different\n              // stylesheets for the same component\n\n              appliedStyles = null;\n            }\n          } else {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n\n          if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n          }\n\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n\n  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10\n  /* needsScopedEncapsulation */\n  ) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n\n    if (BUILD.scoped && flags & 2\n    /* scopedCssEncapsulation */\n    ) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32\n/* hasMode */\n? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n\nconst convertScopedToShadow = css => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{'); // Private\n\n\nconst computeMode = elm => modeResolutionChain.map(h => h(elm)).find(m => !!m); // Public\n\n\nconst setMode = handler => modeResolutionChain.push(handler);\n\nconst getMode = ref => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nconst isDef = v => v != null;\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n          consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n\n  if (vnodeData) {\n    if (BUILD.isDev && nodeName === 'input') {\n      validateInputProperties(vnodeData);\n    } // normalize class / classname attributes\n\n\n    if (BUILD.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n\n    if (BUILD.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n\n    if (BUILD.vdomClass) {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  if (BUILD.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n  }\n\n  if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  if (BUILD.vdomKey) {\n    vnode.$key$ = key;\n  }\n\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n\n  if (BUILD.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n\n  if (BUILD.vdomKey) {\n    vnode.$key$ = null;\n  }\n\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = null;\n  }\n\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\n\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\n\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n\nconst validateInputProperties = vnodeData => {\n  const props = Object.keys(vnodeData);\n  const typeIndex = props.indexOf('type');\n  const minIndex = props.indexOf('min');\n  const maxIndex = props.indexOf('max');\n  const stepIndex = props.indexOf('min');\n  const value = props.indexOf('value');\n\n  if (value === -1) {\n    return;\n  }\n\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n  }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (BUILD.vdomClass && memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (BUILD.vdomStyle && memberName === 'style') {\n      // update style attribute, css properties and values\n      if (BUILD.updatable) {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (!BUILD.hydrateServerSide && prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (!BUILD.hydrateServerSide && prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (BUILD.vdomKey && memberName === 'key') ;else if (BUILD.vdomRef && memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else if (BUILD.vdomPropOrAttr) {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false; // tslint:disable-next-line: triple-equals\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n\n\n      let xlink = false;\n\n      if (BUILD.vdomXlink) {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (BUILD.vdomXlink && xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n\n        if (BUILD.vdomXlink && xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n\n  if (BUILD.updatable) {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n\n  if (BUILD.slotRelocation && !useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n\n      newVNode.$flags$ |= newVNode.$children$ ? // slot element has fallback content\n      2\n      /* isSlotFallback */\n      : // slot element does not have fallback content\n      1\n      /* isSlotReference */\n      ;\n    }\n  }\n\n  if (BUILD.isDev && newVNode.$elm$) {\n    consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n  }\n\n  if (BUILD.vdomText && newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (BUILD.slotRelocation && newVNode.$flags$ & 1\n  /* isSlotReference */\n  ) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n  } else {\n    if (BUILD.svg && !isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    } // create element\n\n\n    elm = newVNode.$elm$ = BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2\n    /* isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$) : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2\n    /* isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$);\n\n    if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    } // add css classes, attrs, props, listeners, etc.\n\n\n    if (BUILD.vdomAttribute) {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n\n    if (BUILD.svg) {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n\n  if (BUILD.slotRelocation) {\n    elm['s-hn'] = hostTagName;\n\n    if (newVNode.$flags$ & (2\n    /* isSlotFallback */\n    | 1\n    /* isSlotReference */\n    )) {\n      // remember the content reference comment\n      elm['s-sr'] = true; // remember the content reference comment\n\n      elm['s-cr'] = contentRef; // remember the slot name, or empty string for default slot\n\n      elm['s-sn'] = newVNode.$name$ || ''; // check if we've got an old vnode for this slot\n\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n\n  return elm;\n};\n\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1\n  /* isTmpDisconnected */\n  ;\n  const oldSlotChildNodes = parentElm.childNodes;\n\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode)); // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n\n  plt.$flags$ &= ~1\n  /* isTmpDisconnected */\n  ;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n\n  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n\n      if (BUILD.slotRelocation) {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      } // remove the vnode's element from the dom\n\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // Vnode moved right\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // Vnode moved left\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n\n      if (BUILD.vdomKey) {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (BUILD.vdomKey && idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        if (BUILD.slotRelocation) {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        } else {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (BUILD.updatable && newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    if (BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n      return vnode1.$name$ === vnode2.$name$;\n    }\n\n    if (BUILD.vdomKey) {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\n\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  let defaultHolder;\n\n  if (!BUILD.vdomText || text === null) {\n    if (BUILD.svg) {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    } // element node\n\n\n    if (BUILD.vdomAttribute || BUILD.reflect) {\n      if (BUILD.slot && tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (BUILD.updatable && oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n\n    if (BUILD.svg && isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst updateFallbackSlotVisibility = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNodes = elm.childNodes;\n  let childNode;\n  let i;\n  let ilen;\n  let j;\n  let slotNameAttr;\n  let nodeType;\n\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn']; // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n\n        childNode.hidden = false;\n\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1\n            /* ElementNode */\n            || nodeType === 3\n            /* TextNode */\n            && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      } // keep drilling down\n\n\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\n\nconst relocateNodes = [];\n\nconst relocateSlotContent = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNode;\n  let node;\n  let hostContentNodes;\n  let slotNameAttr;\n  let relocateNodeData;\n  let j;\n  let i = 0;\n  let childNodes = elm.childNodes;\n  let ilen = childNodes.length;\n\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node); // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\n\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n  if (nodeToRelocate.nodeType === 1\n  /* ElementNode */\n  ) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n\n  return slotNameAttr === '';\n};\n\nconst callNodeRefs = vNode => {\n  if (BUILD.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName; // <Host> runtime check\n\n  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n  }\n\n  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n\n  if (BUILD.scoped || BUILD.shadowDom) {\n    scopeId = hostElm['s-sc'];\n  }\n\n  if (BUILD.slotRelocation) {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1\n    /* shadowDomEncapsulation */\n    ) !== 0; // always reset\n\n    checkSlotFallbackVisibility = false;\n  } // synchronous patch\n\n\n  patch(oldVNode, rootVnode);\n\n  if (BUILD.slotRelocation) {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1\n    /* isTmpDisconnected */\n    ;\n\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      let relocateData;\n      let nodeToRelocate;\n      let orgLocationNode;\n      let parentNodeRef;\n      let insertBeforeNode;\n      let refNode;\n      let i = 0;\n\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              } // add it back to the dom but in its new home\n\n\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1\n          /* ElementNode */\n          ) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    } // done moving nodes around\n    // allow the disconnect callback to work again\n\n\n    plt.$flags$ &= ~1\n    /* isTmpDisconnected */\n    ; // always reset\n\n    relocateNodes.length = 0;\n  }\n}; // slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\n\n\nconst slotReferenceDebugNode = slotVNode => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\n\nconst originalLocationDebugNode = nodeToRelocate => doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})` : `[${nodeToRelocate.textContent}]`));\n\nconst getElement = ref => BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\n\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      if (BUILD.isDev && !elm.isConnected) {\n        consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n      }\n\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4\n        /* Bubbles */\n        ),\n        composed: !!(flags & 2\n        /* Composed */\n        ),\n        cancelable: !!(flags & 1\n        /* Cancellable */\n        ),\n        detail\n      });\n    }\n  };\n};\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  if (BUILD.taskQueue && BUILD.updatable) {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (BUILD.asyncLoading && hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const elm = hostRef.$hostElement$;\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  let promise;\n\n  if (isInitialLoad) {\n    if (BUILD.lazyLoad && BUILD.hostListener) {\n      hostRef.$flags$ |= 256\n      /* isListenReady */\n      ;\n\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentWillLoad');\n\n    if (BUILD.cmpWillLoad) {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  } else {\n    emitLifecycleEvent(elm, 'componentWillUpdate');\n\n    if (BUILD.cmpWillUpdate) {\n      promise = safeCall(instance, 'componentWillUpdate');\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentWillRender');\n\n  if (BUILD.cmpWillRender) {\n    promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n  }\n\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (hostRef, instance, isInitialLoad) {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n\n    if (BUILD.style && isInitialLoad) {\n      // DOM WRITE!\n      attachStyles(hostRef);\n    }\n\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024\n      /* devOnRender */\n      ;\n    }\n\n    if (BUILD.hydrateServerSide) {\n      yield callRender(hostRef, instance, elm);\n    } else {\n      callRender(hostRef, instance, elm);\n    }\n\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n      plt.$cssShim$.updateHost(elm);\n    }\n\n    if (BUILD.isDev) {\n      hostRef.$renderCount$++;\n      hostRef.$flags$ &= ~1024\n      /* devOnRender */\n      ;\n    }\n\n    if (BUILD.hydrateServerSide) {\n      try {\n        // manually connected child components during server-side hydrate\n        serverSideConnected(elm);\n\n        if (isInitialLoad) {\n          // using only during server-side hydrate\n          if (hostRef.$cmpMeta$.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n            elm['s-en'] = '';\n          } else if (hostRef.$cmpMeta$.$flags$ & 2\n          /* scopedCssEncapsulation */\n          ) {\n            elm['s-en'] = 'c';\n          }\n        }\n      } catch (e) {\n        consoleError(e, elm);\n      }\n    }\n\n    if (BUILD.asyncLoading && rc) {\n      // ok, so turns out there are some child host elements\n      // waiting on this parent element to load\n      // let's fire off all update callbacks waiting\n      rc.map(cb => cb());\n      elm['s-rc'] = undefined;\n    }\n\n    endRender();\n    endUpdate();\n\n    if (BUILD.asyncLoading) {\n      const childrenPromises = elm['s-p'];\n\n      const postUpdate = () => postUpdateComponent(hostRef);\n\n      if (childrenPromises.length === 0) {\n        postUpdate();\n      } else {\n        Promise.all(childrenPromises).then(postUpdate);\n        hostRef.$flags$ |= 4\n        /* isWaitingForChildren */\n        ;\n        childrenPromises.length = 0;\n      }\n    } else {\n      postUpdateComponent(hostRef);\n    }\n  });\n\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst callRender = (hostRef, instance, elm) => {\n  // in order for bundlers to correctly treeshake the BUILD object\n  // we need to ensure BUILD is not deoptimized within a try/catch\n  // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n  const allRenderFn = BUILD.allRenderFn ? true : false;\n  const lazyLoad = BUILD.lazyLoad ? true : false;\n  const taskQueue = BUILD.taskQueue ? true : false;\n  const updatable = BUILD.updatable ? true : false;\n\n  try {\n    renderingRef = instance;\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n\n    if (BUILD.hasRenderFn || BUILD.reflect) {\n      if (BUILD.vdomRender || BUILD.reflect) {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        if (BUILD.hydrateServerSide) {\n          return Promise.resolve(instance).then(value => renderVdom(hostRef, value));\n        } else {\n          renderVdom(hostRef, instance);\n        }\n      } else {\n        elm.textContent = instance;\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  renderingRef = null;\n  return null;\n};\n\nconst getRenderingRef = () => renderingRef;\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (BUILD.cmpDidRender) {\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024\n      /* devOnRender */\n      ;\n    }\n\n    safeCall(instance, 'componentDidRender');\n\n    if (BUILD.isDev) {\n      hostRef.$flags$ &= ~1024\n      /* devOnRender */\n      ;\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentDidRender');\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n\n    if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n\n    if (BUILD.cmpDidLoad) {\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 2048\n        /* devOnDidLoad */\n        ;\n      }\n\n      safeCall(instance, 'componentDidLoad');\n\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~2048\n        /* devOnDidLoad */\n        ;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidLoad');\n    endPostUpdate();\n\n    if (BUILD.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD.cmpDidUpdate) {\n      // we've already loaded this component\n      // fire off the user's componentDidUpdate method (if one was provided)\n      // componentDidUpdate runs AFTER render() has been called\n      // and all child components have finished updating\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024\n        /* devOnRender */\n        ;\n      }\n\n      safeCall(instance, 'componentDidUpdate');\n\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~1024\n        /* devOnRender */\n        ;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidUpdate');\n    endPostUpdate();\n  }\n\n  if (BUILD.hotModuleReplacement) {\n    elm['s-hmr-load'] && elm['s-hmr-load']();\n  }\n\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n\n  if (BUILD.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n\n};\n\nconst forceUpdate = ref => {\n  if (BUILD.updatable) {\n    const hostRef = getHostRef(ref);\n    const isConnected = hostRef.$hostElement$.isConnected;\n\n    if (isConnected && (hostRef.$flags$ & (2\n    /* hasRendered */\n    | 16\n    /* isQueuedForUpdate */\n    )) === 2\n    /* hasRendered */\n    ) {\n      scheduleUpdate(hostRef, false);\n    } // Returns \"true\" when the forced update was successfully scheduled\n\n\n    return isConnected;\n  }\n\n  return false;\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  if (BUILD.cssAnnotations) {\n    addHydratedFlag(doc.documentElement);\n  }\n\n  if (BUILD.asyncQueue) {\n    plt.$flags$ |= 2\n    /* appLoaded */\n    ;\n  }\n\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n\n  if (BUILD.profile && performance.measure) {\n    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n  }\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n  if (BUILD.lifecycleDOMEvents) {\n    emitEvent(elm, 'stencil_' + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\n\nconst addHydratedFlag = elm => BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined;\n\nconst serverSideConnected = elm => {\n  const children = elm.children;\n\n  if (children != null) {\n    for (let i = 0, ii = children.length; i < ii; i++) {\n      const childElm = children[i];\n\n      if (typeof childElm.connectedCallback === 'function') {\n        childElm.connectedCallback();\n      }\n\n      serverSideConnected(childElm);\n    }\n  }\n};\n\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n  const endHydrate = createTime('hydrateClient', tagName);\n  const shadowRoot = hostElm.shadowRoot;\n  const childRenderNodes = [];\n  const slotNodes = [];\n  const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n  const vnode = hostRef.$vnode$ = newVNode(tagName, null);\n\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(c => {\n    const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    const node = c.$elm$;\n\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n\n  if (BUILD.shadowDom && shadowRoot) {\n    shadowRootNodes.map(shadowRootNode => {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n\n  endHydrate();\n};\n\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n  let childNodeType;\n  let childIdSplt;\n  let childVNode;\n  let i;\n\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID); // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        } // add our child vnode to a specific index of the vnode's children\n\n\n        parentVNode.$children$[childVNode.$index$] = childVNode; // this is now the new parent vnode for all the next child checks\n\n        parentVNode = childVNode;\n\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    } // recursively drill down, end to start so we can remove nodes\n\n\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8\n  /* CommentNode */\n  ) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3\n        /* TextNode */\n        ) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode); // remove the text comment since it's no longer needed\n\n          node.remove();\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifcally for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n\n          node['s-sr'] = true;\n\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            } // insert the new slot element before the slot comment\n\n\n            node.parentNode.insertBefore(childVNode.$elm$, node); // remove the slot comment since it's not needed for shadow\n\n            node.remove();\n\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n\n          slotNodes.push(childVNode);\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else if (BUILD.slotRelocation) {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    const vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\n\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n    let i = 0;\n\n    for (; i < node.childNodes.length; i++) {\n      initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n    }\n\n    if (node.shadowRoot) {\n      for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8\n  /* CommentNode */\n  ) {\n    const childIdSplt = node.nodeValue.split('.');\n\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = ''; // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n};\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD.propBoolean && propType & 4\n    /* Boolean */\n    ) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n\n    if (BUILD.propNumber && propType & 2\n    /* Number */\n    ) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n\n    if (BUILD.propString && propType & 1\n    /* String */\n    ) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if ((!BUILD.lazyLoad || !(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && newVal !== oldVal) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (BUILD.isDev) {\n      if (hostRef.$flags$ & 1024\n      /* devOnRender */\n      ) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      } else if (hostRef.$flags$ & 2048\n      /* devOnDidLoad */\n      ) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      }\n    }\n\n    if (!BUILD.lazyLoad || instance) {\n      // get an array of method names of watch functions to call\n      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n\n      if (BUILD.updatable && (flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n        if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        } // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n\n\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (BUILD.member && cmpMeta.$members$) {\n    if (BUILD.watchCallback && Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if ((BUILD.prop || BUILD.state) && (memberFlags & 31\n      /* Prop */\n      || (!BUILD.lazyLoad || flags & 2\n      /* proxyState */\n      ) && memberFlags & 32\n      /* State */\n      )) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // only during dev time\n            if (BUILD.isDev) {\n              const ref = getHostRef(this);\n\n              if ( // we are proxying the instance (not element)\n              (flags & 1\n              /* isElementConstructor */\n              ) === 0 && // the element is not constructing\n              (ref.$flags$ & 8\n              /* isConstructingInstance */\n              ) === 0 && // the member is a prop\n              (memberFlags & 31\n              /* Prop */\n              ) !== 0 && // the member is not mutable\n              (memberFlags & 1024\n              /* Mutable */\n              ) === 0) {\n                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n              }\n            } // proxyComponent, set value\n\n\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      } else if (BUILD.lazyLoad && BUILD.method && flags & 1\n      /* isElementConstructor */\n      && memberFlags & 64\n      /* Method */\n      ) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value(...args) {\n            const ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n          }\n\n        });\n      }\n    });\n\n    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1\n    /* isElementConstructor */\n    )) {\n      const attrNameToPropName = new Map();\n\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName);\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      }; // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n\n\n      Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n      /* HasAttribute */\n      ) // filter to only keep props that should match attributes\n      .map(([propName, m]) => {\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n\n        if (BUILD.reflect && m[0] & 512\n        /* ReflectAttr */\n        ) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n\n        return attrName;\n      });\n    }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    // initializeComponent\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) && (hostRef.$flags$ & 32\n    /* hasInitializedComponent */\n    ) === 0) {\n      if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n        // we haven't initialized this element yet\n        hostRef.$flags$ |= 32\n        /* hasInitializedComponent */\n        ; // lazy loaded components\n        // request the component's implementation to be\n        // wired up with the host element\n\n        Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n\n        if (Cstr.then) {\n          // Await creates a micro-task avoid if possible\n          const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n          Cstr = yield Cstr;\n          endLoad();\n        }\n\n        if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n          throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n        }\n\n        if (BUILD.member && !Cstr.isProxied) {\n          // we'eve never proxied this Constructor before\n          // let's add the getters/setters to its prototype before\n          // the first time we create an instance of the implementation\n          if (BUILD.watchCallback) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n          }\n\n          proxyComponent(Cstr, cmpMeta, 2\n          /* proxyState */\n          );\n          Cstr.isProxied = true;\n        }\n\n        const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n        // but let's keep track of when we start and stop\n        // so that the getters/setters don't incorrectly step on data\n\n        if (BUILD.member) {\n          hostRef.$flags$ |= 8\n          /* isConstructingInstance */\n          ;\n        } // construct the lazy-loaded component implementation\n        // passing the hostRef is very important during\n        // construction in order to directly wire together the\n        // host element and the lazy-loaded instance\n\n\n        try {\n          new Cstr(hostRef);\n        } catch (e) {\n          consoleError(e);\n        }\n\n        if (BUILD.member) {\n          hostRef.$flags$ &= ~8\n          /* isConstructingInstance */\n          ;\n        }\n\n        if (BUILD.watchCallback) {\n          hostRef.$flags$ |= 128\n          /* isWatchReady */\n          ;\n        }\n\n        endNewInstance();\n        fireConnectedCallback(hostRef.$lazyInstance$);\n      } else {\n        // sync constructor component\n        Cstr = elm.constructor;\n        hostRef.$flags$ |= 128\n        /* isWatchReady */\n        | 32\n        /* hasInitializedComponent */\n        ;\n      }\n\n      if (BUILD.style && Cstr.style) {\n        // this component has styles but we haven't registered them yet\n        let style = Cstr.style;\n\n        if (BUILD.mode && typeof style !== 'string') {\n          style = style[hostRef.$modeName$ = computeMode(elm)];\n\n          if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n            elm.setAttribute('s-mode', hostRef.$modeName$);\n          }\n        }\n\n        const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n\n        if (!styles.has(scopeId)) {\n          const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n\n          if (!BUILD.hydrateServerSide && BUILD.shadowDom && BUILD.shadowDomShim && cmpMeta.$flags$ & 8\n          /* needsShadowDomShim */\n          ) {\n            style = yield import('./shadow-css.js').then(m => m.scopeCss(style, scopeId, false));\n          }\n\n          registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ));\n          endRegisterStyles();\n        }\n      }\n    } // we've successfully created a lazy instance\n\n\n    const ancestorComponent = hostRef.$ancestorComponent$;\n\n    const schedule = () => scheduleUpdate(hostRef, true);\n\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n      // this is the intial load and this component it has an ancestor component\n      // but the ancestor component has NOT fired its will update lifecycle yet\n      // so let's just cool our jets and wait for the ancestor to continue first\n      // this will get fired off when the ancestor component\n      // finally gets around to rendering its lazy self\n      // fire off the initial update\n      ancestorComponent['s-rc'].push(schedule);\n    } else {\n      schedule();\n    }\n  });\n\n  return function initializeComponent(_x4, _x5, _x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nconst fireConnectedCallback = instance => {\n  if (BUILD.lazyLoad && BUILD.connectedCallback) {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (BUILD.hostListenerTargetParent) {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      let hostId;\n\n      if (BUILD.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n\n        if (hostId) {\n          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n            const scopeId = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(scopeId + '-h', scopeId + '-s');\n          }\n\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n\n      if (BUILD.slotRelocation && !hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4\n        /* hasSlotRelocation */\n        | 8\n        /* needsShadowDomShim */\n        )) {\n          setContentReference(elm);\n        }\n      }\n\n      if (BUILD.asyncLoading) {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1\n          /* ElementNode */\n          && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n\n      if (BUILD.prop && BUILD.lazyLoad && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      if (BUILD.initializeNextTick) {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false); // fire off connectedCallback() on component instance\n\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    endConnected();\n  }\n};\n\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : '');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n\n    if (BUILD.hostListener) {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    } // clear CSS var-shim tracking\n\n\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n      plt.$cssShim$.removeHost(elm);\n    }\n\n    if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n      safeCall(instance, 'disconnectedCallback');\n    }\n\n    if (BUILD.cmpDidUnload) {\n      safeCall(instance, 'componentDidUnload');\n    }\n  }\n};\n\nconst defineCustomElement = (Cstr, compactMeta) => {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\n\nconst proxyCustomElement = (Cstr, compactMeta) => {\n  const cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n\n  if (BUILD.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n\n  if (BUILD.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n\n  if (BUILD.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n\n  if (BUILD.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n\n  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1\n  /* shadowDomEncapsulation */\n  ) {\n    cmpMeta.$flags$ |= 8\n    /* needsShadowDomShim */\n    ;\n  }\n\n  const originalConnectedCallback = Cstr.prototype.connectedCallback;\n  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n\n    connectedCallback() {\n      connectedCallback(this);\n\n      if (BUILD.connectedCallback && originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n\n    disconnectedCallback() {\n      disconnectedCallback(this);\n\n      if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    }\n\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1\n  /* isElementConstructor */\n  | 2\n  /* proxyState */\n  );\n};\n\nconst forceModeUpdate = elm => {\n  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n    const mode = computeMode(elm);\n    const hostRef = getHostRef(elm);\n\n    if (hostRef.$modeName$ !== mode) {\n      const cmpMeta = hostRef.$cmpMeta$;\n      const oldScopeId = elm['s-sc'];\n      const scopeId = getScopeId(cmpMeta, mode);\n      const style = elm.constructor.style[mode];\n      const flags = cmpMeta.$flags$;\n\n      if (style) {\n        if (!styles.has(scopeId)) {\n          registerStyle(scopeId, style, !!(flags & 1\n          /* shadowDomEncapsulation */\n          ));\n        }\n\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\n\nconst attachShadow = el => {\n  if (supportsShadow) {\n    el.attachShadow({\n      mode: 'open'\n    });\n  } else {\n    el.shadowRoot = el;\n  }\n};\n\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n  // ¯\\_(ツ)_/¯\n  const hostRef = getHostRef(elm); // reset state flags to only have been connected\n\n  hostRef.$flags$ = 1\n  /* hasConnected */\n  ; // TODO\n  // detatch any event listeners that may have been added\n  // because we're not passing an exact event name it'll\n  // remove all of this element's event, which is good\n  // create a callback for when this component finishes hmr\n\n  elm['s-hmr-load'] = () => {\n    // finished hmr for this element\n    delete elm['s-hmr-load'];\n  }; // re-initialize the component\n\n\n  initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\n\nconst patchCloneNode = HostElementPrototype => {\n  const orgCloneNode = HostElementPrototype.cloneNode;\n\n  HostElementPrototype.cloneNode = function (deep) {\n    const srcNode = this;\n    const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n\n    if (BUILD.slot && !isShadowDom && deep) {\n      let i = 0;\n      let slotted, nonStencilNode;\n      let stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n\n      for (; i < srcNode.childNodes.length; i++) {\n        slotted = srcNode.childNodes[i]['s-nr'];\n        nonStencilNode = stencilPrivates.every(privateField => !srcNode.childNodes[i][privateField]);\n\n        if (slotted) {\n          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n\n        if (nonStencilNode) {\n          clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n        }\n      }\n    }\n\n    return clonedNode;\n  };\n};\n\nconst patchSlotAppendChild = HostElementPrototype => {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n\n  HostElementPrototype.appendChild = function (newChild) {\n    const slotName = newChild['s-sn'] = getSlotName(newChild);\n    const slotNode = getHostSlotNode(this.childNodes, slotName);\n\n    if (slotNode) {\n      const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n      const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n    }\n\n    return this.__appendChild(newChild);\n  };\n};\n\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n  class FakeNodeList extends Array {\n    item(n) {\n      return this[n];\n    }\n\n  }\n\n  if (cmpMeta.$flags$ & 8\n  /* needsShadowDomShim */\n  ) {\n    const childNodesFn = elm.__lookupGetter__('childNodes');\n\n    Object.defineProperty(elm, 'children', {\n      get() {\n        return this.childNodes.map(n => n.nodeType === 1);\n      }\n\n    });\n    Object.defineProperty(elm, 'childElementCount', {\n      get() {\n        return elm.children.length;\n      }\n\n    });\n    Object.defineProperty(elm, 'childNodes', {\n      get() {\n        const childNodes = childNodesFn.call(this);\n\n        if ((plt.$flags$ & 1\n        /* isTmpDisconnected */\n        ) === 0 && getHostRef(this).$flags$ & 2\n        /* hasRendered */\n        ) {\n          const result = new FakeNodeList();\n\n          for (let i = 0; i < childNodes.length; i++) {\n            const slot = childNodes[i]['s-nr'];\n\n            if (slot) {\n              result.push(slot);\n            }\n          }\n\n          return result;\n        }\n\n        return FakeNodeList.from(childNodes);\n      }\n\n    });\n  }\n};\n\nconst getSlotName = node => node['s-sn'] || node.nodeType === 1 && node.getAttribute('slot') || '';\n\nconst getHostSlotNode = (childNodes, slotName) => {\n  let i = 0;\n  let childNode;\n\n  for (; i < childNodes.length; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n      return childNode;\n    }\n\n    childNode = getHostSlotNode(childNode.childNodes, slotName);\n\n    if (childNode) {\n      return childNode;\n    }\n  }\n\n  return null;\n};\n\nconst getHostSlotChildNodes = (n, slotName) => {\n  const childNodes = [n];\n\n  while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n    childNodes.push(n);\n  }\n\n  return childNodes;\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  if (BUILD.profile && performance.mark) {\n    performance.mark('st:app:start');\n  }\n\n  installDevTools();\n  const endBootstrap = createTime('bootstrapLazy');\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  const styles = /*@__PURE__*/doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n  let appLoadFallback;\n  let isBootstrapping = true;\n  let i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n\n  if (BUILD.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4\n      /* queueSync */\n      ;\n    }\n  }\n\n  if (BUILD.hydrateClientSide) {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2\n    /* appLoaded */\n    ;\n  }\n\n  if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n\n  lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n    const cmpMeta = {\n      $flags$: compactMeta[0],\n      $tagName$: compactMeta[1],\n      $members$: compactMeta[2],\n      $listeners$: compactMeta[3]\n    };\n\n    if (BUILD.member) {\n      cmpMeta.$members$ = compactMeta[2];\n    }\n\n    if (BUILD.hostListener) {\n      cmpMeta.$listeners$ = compactMeta[3];\n    }\n\n    if (BUILD.reflect) {\n      cmpMeta.$attrsToReflect$ = [];\n    }\n\n    if (BUILD.watchCallback) {\n      cmpMeta.$watchers$ = {};\n    }\n\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1\n    /* shadowDomEncapsulation */\n    ) {\n      cmpMeta.$flags$ |= 8\n      /* needsShadowDomShim */\n      ;\n    }\n\n    const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n    const HostElement = class extends HTMLElement {\n      // StencilLazyHost\n      constructor(self) {\n        // @ts-ignore\n        super(self);\n        self = this;\n        registerHost(self, cmpMeta);\n\n        if (BUILD.shadowDom && cmpMeta.$flags$ & 1\n        /* shadowDomEncapsulation */\n        ) {\n          // this component is using shadow dom\n          // and this browser supports shadow dom\n          // add the read-only property \"shadowRoot\" to the host element\n          // adding the shadow root build conditionals to minimize runtime\n          if (supportsShadow) {\n            if (BUILD.shadowDelegatesFocus) {\n              self.attachShadow({\n                mode: 'open',\n                delegatesFocus: !!(cmpMeta.$flags$ & 16\n                /* shadowDelegatesFocus */\n                )\n              });\n            } else {\n              self.attachShadow({\n                mode: 'open'\n              });\n            }\n          } else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n            self.shadowRoot = self;\n          }\n        }\n\n        if (BUILD.slotChildNodesFix) {\n          patchChildSlotNodes(self, cmpMeta);\n        }\n      }\n\n      connectedCallback() {\n        if (appLoadFallback) {\n          clearTimeout(appLoadFallback);\n          appLoadFallback = null;\n        }\n\n        if (isBootstrapping) {\n          // connectedCallback will be processed once all components have been registered\n          deferredConnectedCallbacks.push(this);\n        } else {\n          plt.jmp(() => connectedCallback(this));\n        }\n      }\n\n      disconnectedCallback() {\n        plt.jmp(() => disconnectedCallback(this));\n      }\n\n      componentOnReady() {\n        return getHostRef(this).$onReadyPromise$;\n      }\n\n    };\n\n    if (BUILD.cloneNodeFix) {\n      patchCloneNode(HostElement.prototype);\n    }\n\n    if (BUILD.appendChildSlotFix) {\n      patchSlotAppendChild(HostElement.prototype);\n    }\n\n    if (BUILD.hotModuleReplacement) {\n      HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n        hmrStart(this, cmpMeta, hmrVersionId);\n      };\n    }\n\n    cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n    if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n      cmpTags.push(tagName);\n      customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n      /* isElementConstructor */\n      ));\n    }\n  }));\n\n  if (BUILD.hydratedClass || BUILD.hydratedAttribute) {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    if (BUILD.profile) {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, 'timeout'));\n    } else {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst getAssetPath = path => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\n\nconst setAssetPath = path => plt.$resourcesUrl$ = path;\n\nconst getConnect = (_ref, tagName) => {\n  const componentOnReady = () => {\n    let elm = doc.querySelector(tagName);\n\n    if (!elm) {\n      elm = doc.createElement(tagName);\n      doc.body.appendChild(elm);\n    }\n\n    return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n  };\n\n  const create = (...args) => {\n    return componentOnReady().then(el => el.create(...args));\n  };\n\n  return {\n    create,\n    componentOnReady\n  };\n};\n\nconst getContext = (_elm, context) => {\n  if (context in Context) {\n    return Context[context];\n  } else if (context === 'window') {\n    return win;\n  } else if (context === 'document') {\n    return doc;\n  } else if (context === 'isServer' || context === 'isPrerender') {\n    return BUILD.hydrateServerSide ? true : false;\n  } else if (context === 'isClient') {\n    return BUILD.hydrateServerSide ? false : true;\n  } else if (context === 'resourcesUrl' || context === 'publicPath') {\n    return getAssetPath('.');\n  } else if (context === 'queue') {\n    return {\n      write: writeTask,\n      read: readTask,\n      tick: {\n        then(cb) {\n          return nextTick(cb);\n        }\n\n      }\n    };\n  }\n\n  return undefined;\n};\n\nconst insertVdomAnnotations = (doc, staticComponents) => {\n  if (doc != null) {\n    const docData = {\n      hostIds: 0,\n      rootLevelIds: 0,\n      staticComponents: new Set(staticComponents)\n    };\n    const orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach(orgLocationNode => {\n      if (orgLocationNode != null) {\n        const nodeRef = orgLocationNode['s-nr'];\n        let hostId = nodeRef['s-host-id'];\n        let nodeId = nodeRef['s-node-id'];\n        let childId = `${hostId}.${nodeId}`;\n\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = `${hostId}.${nodeId}`;\n\n          if (nodeRef.nodeType === 1\n          /* ElementNode */\n          ) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n          } else if (nodeRef.nodeType === 3\n          /* TextNode */\n          ) {\n            if (hostId === 0) {\n              const textContent = nodeRef.nodeValue.trim();\n\n              if (textContent === '') {\n                // useless whitespace node at the document root\n                orgLocationNode.remove();\n                return;\n              }\n            }\n\n            const commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n\n        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n        const orgLocationParentNode = orgLocationNode.parentElement;\n\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode['s-en'] === '') {\n            // ending with a \".\" means that the parent element\n            // of this node's original location is a SHADOW dom element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.`;\n          } else if (orgLocationParentNode['s-en'] === 'c') {\n            // ending with a \".c\" means that the parent element\n            // of this node's original location is a SCOPED element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.c`;\n          }\n        }\n\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\n\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n  if (node == null) {\n    return;\n  }\n\n  if (node['s-nr'] != null) {\n    orgLocationNodes.push(node);\n  }\n\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n    node.childNodes.forEach(childNode => {\n      const hostRef = getHostRef(childNode);\n\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        const cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\n\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n  if (vnode != null) {\n    const hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n\n    if (hostElm['s-cr'] != null) {\n      hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n    }\n\n    if (vnode.$children$ != null) {\n      const depth = 0;\n      vnode.$children$.forEach((vnodeChild, index) => {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n      const parent = hostElm.parentElement;\n\n      if (parent && parent.childNodes) {\n        const parentChildNodes = Array.from(parent.childNodes);\n        const comment = parentChildNodes.find(node => node.nodeType === 8\n        /* CommentNode */\n        && node['s-sr']);\n\n        if (comment) {\n          const index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n        }\n      }\n    }\n  }\n};\n\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n  const childElm = vnodeChild.$elm$;\n\n  if (childElm == null) {\n    return;\n  }\n\n  const nodeId = cmpData.nodeIds++;\n  const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n  childElm['s-host-id'] = hostId;\n  childElm['s-node-id'] = nodeId;\n\n  if (childElm.nodeType === 1\n  /* ElementNode */\n  ) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n  } else if (childElm.nodeType === 3\n  /* TextNode */\n  ) {\n    const parentNode = childElm.parentNode;\n    const nodeName = parentNode.nodeName;\n\n    if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n      const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n      const commentBeforeTextNode = doc.createComment(textNodeId);\n      parentNode.insertBefore(commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8\n  /* CommentNode */\n  ) {\n    if (childElm['s-sr']) {\n      const slotName = childElm['s-sn'] || '';\n      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n\n  if (vnodeChild.$children$ != null) {\n    const childDepth = depth + 1;\n    vnodeChild.$children$.forEach((vnode, index) => {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n    });\n  }\n};\n\nconst setPlatformOptions = opts => Object.assign(plt, opts);\n\nconst Fragment = (_, children) => children;\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n\n  if (BUILD.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (customError || console.error)(e, el);\n\nconst STENCIL_DEV_MODE = BUILD.isTesting ? ['STENCIL:'] // E2E testing\n: ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\n\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\n\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\n\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\n\nconst setErrorHandler = handler => customError = handler;\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n\n  if (BUILD.isDev && typeof bundleId !== 'string') {\n    consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n    return undefined;\n  }\n\n  const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then(importedModule => {\n    if (!BUILD.hotModuleReplacement) {\n      cmpModules.set(bundleId, importedModule);\n    }\n\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst consumeTimeout = (queue, timeout) => {\n  let i = 0;\n  let ts = 0;\n\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\n\nconst flush = () => {\n  if (BUILD.asyncQueue) {\n    queueCongestion++;\n  } // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n\n\n  consume(queueDomReads); // DOM WRITES!!!\n\n  if (BUILD.asyncQueue) {\n    const timeout = (plt.$flags$ & 6\n    /* queueMask */\n    ) === 2\n    /* appLoaded */\n    ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push(...queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nconst Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, attachShadow, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformOptions, setValue, styles, supportsConstructibleStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };","map":{"version":3,"sources":["/home/oldboy379/cdciudad-web/cdciudad-web/node_modules/@stencil/core/internal/client/index.js"],"names":["scopeId","contentRef","hostTagName","customError","i","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","renderingRef","queueCongestion","queuePending","BUILD","NAMESPACE","win","window","CSS","cssVarShim","doc","document","head","H","HTMLElement","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","supportsShadow","shadowDomShim","shadowDom","attachShadow","indexOf","supportsListenerOptions","Object","defineProperty","get","e","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","constructableCSS","CSSStyleSheet","replace","Context","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","hostListener","hostListenerTargetParent","filter","flags","map","name","method","target","hostListenerTarget","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","lazyLoad","$lazyInstance$","$queuedListeners$","$hostElement$","consoleError","hostListenerTargetDocument","hostListenerTargetWindow","hostListenerTargetBody","body","parentElement","passive","capture","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","profile","performance","mark","key","measure","uniqueTime","measureText","getEntriesByName","length","inspect","ref","getHostRef","undefined","hostElement","renderCount","$renderCount$","hasRendered","hasConnected","isWaitingForChildren","isConstructingInstance","isQueuedForUpdate","hasInitializedComponent","hasLoadedComponent","isWatchReady","isListenReady","needsRerender","instanceValues","$instanceValues$","ancestorComponent","$ancestorComponent$","lazyInstance","vnode","$vnode$","modeName","$modeName$","onReadyPromise","$onReadyPromise$","onReadyResolve","$onReadyResolve$","onInstancePromise","$onInstancePromise$","onInstanceResolve","$onInstanceResolve$","onRenderResolve","$onRenderResolve$","queuedListeners","rmListeners","installDevTools","devTools","stencil","originalInspect","result","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","attachStyles","nodeType","appliedStyles","styleElm","Set","has","hydrateClientSide","host","querySelector","innerHTML","$cssShim$","createHostStyle","newScopeId","createElement","hydrateServerSide","hotModuleReplacement","setAttribute","insertBefore","add","adoptedStyleSheets","includes","$cmpMeta$","endAttachStyles","$tagName$","shadowRoot","getRootNode","scoped","cssAnnotations","classList","cmp","convertScopedToShadow","css","computeMode","modeResolutionChain","find","m","setMode","getMode","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","isComplexType","o","nodeName","vnodeData","children","child","slotName","simple","lastSimple","vNodeChildren","walk","c","Array","isArray","String","isDev","consoleDevError","$text$","newVNode","validateInputProperties","vdomKey","slotRelocation","vdomClass","classData","className","class","keys","k","join","some","isHost","vdomFunctional","vdomFnUtils","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","vdomAttribute","Host","node","forEach","cb","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","props","typeIndex","minIndex","maxIndex","stepIndex","value","consoleDevWarn","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","vdomStyle","updatable","prop","removeProperty","setProperty","vdomRef","vdomListener","__lookupSetter__","slice","vdomPropOrAttr","isComplex","n","xlink","vdomXlink","getAttribute","removeAttributeNS","removeAttribute","setAttributeNS","parseClassListRegex","split","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","vdomText","createTextNode","isDebug","slotReferenceDebugNode","svg","createElementNS","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","defaultHolder","reflect","slot","textContent","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","nodeToRelocate","vNode","renderVdom","renderFnResults","rootVnode","Error","$attrsToReflect$","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","originalLocationDebugNode","previousSibling","slotVNode","createComment","localName","getElement","createEvent","emit","detail","isConnected","emitEvent","bubbles","composed","cancelable","dispatchEvent","attachToAncestor","asyncLoading","scheduleUpdate","isInitialLoad","taskQueue","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","event","safeCall","emitLifecycleEvent","cmpWillLoad","cmpWillUpdate","cmpWillRender","then","updateComponent","endUpdate","rc","endRender","callRender","updateHost","serverSideConnected","childrenPromises","postUpdate","postUpdateComponent","all","allRenderFn","render","hasRenderFn","vdomRender","getRenderingRef","endPostUpdate","cmpDidRender","addHydratedFlag","cmpDidLoad","appDidLoad","cmpDidUpdate","nextTick","forceUpdate","who","documentElement","asyncQueue","namespace","arg","thenFn","lifecycleName","lifecycleDOMEvents","hydratedClass","hydratedAttribute","ii","childElm","connectedCallback","initializeClientHydrate","hostId","endHydrate","childRenderNodes","slotNodes","shadowRootNodes","$orgLocNodes$","initializeDocumentHydrate","Map","clientHydrate","orgLocationId","$hostId$","$nodeId$","delete","shadowRootNode","childNodeType","childIdSplt","childVNode","$depth$","$index$","nodeValue","orgLocNodes","parsePropertyValue","propValue","propType","propBoolean","propNumber","parseFloat","propString","getValue","setValue","newVal","oldVal","$members$","watchCallback","$watchers$","watchMethods","watchMethodName","cmpShouldUpdate","componentShouldUpdate","proxyComponent","Cstr","member","watchers","members","entries","prototype","memberFlags","state","configurable","enumerable","args","observeAttribute","attrNameToPropName","attributeChangedCallback","attrName","_oldValue","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","constructor","endRegisterStyles","scopeCss","schedule","endConnected","$listeners$","setContentReference","hasAttribute","hasOwnProperty","initializeNextTick","contentRefElm","firstChild","disconnectedCallback","rmListener","removeHost","cmpDidUnload","defineCustomElement","compactMeta","customElements","define","proxyCustomElement","originalConnectedCallback","originalDisconnectedCallback","__registerHost","registerHost","call","is","forceModeUpdate","oldScopeId","hmrStart","patchCloneNode","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","slotted","nonStencilNode","stencilPrivates","every","privateField","appendChildSlotFix","__appendChild","patchSlotAppendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","patchChildSlotNodes","FakeNodeList","item","childNodesFn","__lookupGetter__","from","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","URL","resourcesUrl","baseURI","href","syncQueue","lazyBundle","transformTagName","HostElement","self","shadowDelegatesFocus","delegatesFocus","slotChildNodesFix","clearTimeout","componentOnReady","cloneNodeFix","$lazyBundleId$","setTimeout","getAssetPath","path","assetUrl","origin","location","pathname","setAssetPath","getConnect","_ref","create","getContext","_elm","context","write","read","readTask","tick","insertVdomAnnotations","staticComponents","docData","hostIds","rootLevelIds","orgLocationNodes","parseVNodeAnnotations","nodeRef","nodeId","childId","commentBeforeTextNode","orgLocationNodeId","orgLocationParentNode","cmpData","nodeIds","insertVNodeAnnotations","depth","vnodeChild","index","insertChildVNodeAnnotations","parent","parentChildNodes","comment","textNodeId","slotNodeId","childDepth","setPlatformOptions","Fragment","hostRefs","registerInstance","console","error","STENCIL_DEV_MODE","isTesting","warn","consoleDevInfo","info","setErrorHandler","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","flush","consume","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","Build","isBrowser","isServer","Env"],"mappings":"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","sourcesContent":["let scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.5.2 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: h => h(),\n    raf: h => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)() : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof (new CSSStyleSheet()).replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* Passive */) !== 0,\n        capture: (flags & 2 /* Capture */) !== 0,\n    })\n    : (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* hasRendered */),\n            hasConnected: !!(flags & 1 /* hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* isWatchReady */),\n            isListenReady: !!(flags & 256 /* isListenReady */),\n            needsRerender: !!(flags & 512 /* needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    let style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map(h => h(elm)).find(m => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter(k => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\nconst validateInputProperties = (vnodeData) => {\n    const props = Object.keys(vnodeData);\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('min');\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                            // tslint:disable-next-line: triple-equals\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */ ? 'slot-fb' : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */ ? 'slot-fb' : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        if (BUILD.vdomKey) {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map(relocateNode => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) || nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})` : `[${nodeToRelocate.textContent}]`));\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise(r => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map(cb => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then(value => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected && (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => (BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined);\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map(c => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map(shadowRootNode => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if ((!BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map(watchMethodName => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable && (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) && (memberFlags & 31 /* Prop */ || ((!BUILD.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad && BUILD.method && flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (BUILD.reflect && m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) && (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we'eve never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 128 /* isWatchReady */ | 32 /* hasInitializedComponent */;\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide && BUILD.shadowDom && BUILD.shadowDomShim && cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then(m => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide || ((BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 /* ElementNode */ && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && BUILD.lazyLoad && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map(rmListener => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        if (BUILD.cmpDidUnload) {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst attachShadow = (el) => {\n    if (supportsShadow) {\n        el.attachShadow({ mode: 'open' });\n    }\n    else {\n        el.shadowRoot = el;\n    }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            let stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0 && getHostRef(this).$flags$ & 2 /* hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n        const cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        if (BUILD.member) {\n            cmpMeta.$members$ = compactMeta[2];\n        }\n        if (BUILD.hostListener) {\n            cmpMeta.$listeners$ = compactMeta[3];\n        }\n        if (BUILD.reflect) {\n            cmpMeta.$attrsToReflect$ = [];\n        }\n        if (BUILD.watchCallback) {\n            cmpMeta.$watchers$ = {};\n        }\n        if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n        }\n        const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n        const HostElement = class extends HTMLElement {\n            // StencilLazyHost\n            constructor(self) {\n                // @ts-ignore\n                super(self);\n                self = this;\n                registerHost(self, cmpMeta);\n                if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    // this component is using shadow dom\n                    // and this browser supports shadow dom\n                    // add the read-only property \"shadowRoot\" to the host element\n                    // adding the shadow root build conditionals to minimize runtime\n                    if (supportsShadow) {\n                        if (BUILD.shadowDelegatesFocus) {\n                            self.attachShadow({\n                                mode: 'open',\n                                delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                            });\n                        }\n                        else {\n                            self.attachShadow({ mode: 'open' });\n                        }\n                    }\n                    else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                        self.shadowRoot = self;\n                    }\n                }\n                if (BUILD.slotChildNodesFix) {\n                    patchChildSlotNodes(self, cmpMeta);\n                }\n            }\n            connectedCallback() {\n                if (appLoadFallback) {\n                    clearTimeout(appLoadFallback);\n                    appLoadFallback = null;\n                }\n                if (isBootstrapping) {\n                    // connectedCallback will be processed once all components have been registered\n                    deferredConnectedCallbacks.push(this);\n                }\n                else {\n                    plt.jmp(() => connectedCallback(this));\n                }\n            }\n            disconnectedCallback() {\n                plt.jmp(() => disconnectedCallback(this));\n            }\n            componentOnReady() {\n                return getHostRef(this).$onReadyPromise$;\n            }\n        };\n        if (BUILD.cloneNodeFix) {\n            patchCloneNode(HostElement.prototype);\n        }\n        if (BUILD.appendChildSlotFix) {\n            patchSlotAppendChild(HostElement.prototype);\n        }\n        if (BUILD.hotModuleReplacement) {\n            HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                hmrStart(this, cmpMeta, hmrVersionId);\n            };\n        }\n        cmpMeta.$lazyBundleId$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }));\n    if (BUILD.hydratedClass || BUILD.hydratedAttribute) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map(host => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then(el => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in Context) {\n        return Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach(orgLocationNode => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* ElementNode */) {\n        node.childNodes.forEach(childNode => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find(node => node.nodeType === 8 /* CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst Fragment = (_, children) => children;\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise(r => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise(r => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => customError = handler;\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then(importedModule => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */ ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, attachShadow, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformOptions, setValue, styles, supportsConstructibleStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"]},"metadata":{},"sourceType":"module"}